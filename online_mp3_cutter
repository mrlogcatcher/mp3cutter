<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MP3 Cutter</title>
    <style>
        /* General body styles */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }

        /* Container to center the content and make it responsive */
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
        }

        /* Styling the file input, buttons, and labels */
        input[type="file"] {
            display: block;
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 4px;
            background-color: #f9f9f9;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        input[type="number"], button {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
            border: 1px solid #ccc;
            font-size: 1rem;
        }

        button {
            background-color: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        /* Style for the audio player */
        audio {
            width: 100%;
            margin-top: 20px;
        }

        /* Responsive Design for smaller screens */
        @media (max-width: 600px) {
            body {
                padding: 10px;
            }
            
            h1 {
                font-size: 1.5rem;
            }

            input[type="number"], button {
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        

        <!-- Input for selecting an MP3 file -->
        <input type="file" id="audioFile" accept="audio/*" />
        
        <!-- Start and End Time Inputs -->
        <label for="startTime">Start Time (seconds): </label>
        <input type="number" id="startTime" value="0" step="0.1" min="0" />
        
        <label for="endTime">End Time (seconds): </label>
        <input type="number" id="endTime" value="10" step="0.1" min="0" />
        
        <button onclick="cutAudio()">Cut MP3</button>

        <!-- Audio Element to play the selected file -->
        <audio id="audioPlayer" controls></audio>
    </div>

    <script>
        let audioContext;
        let audioBuffer;

        document.getElementById('audioFile').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    // Load the audio into the audio context
                    initAudioContext(e.target.result);
                };
                reader.readAsArrayBuffer(file);
            }
        });

        // Initialize Audio Context
        function initAudioContext(arrayBuffer) {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            audioContext.decodeAudioData(arrayBuffer, function(buffer) {
                audioBuffer = buffer;
                const url = URL.createObjectURL(new Blob([arrayBuffer], { type: 'audio/mp3' }));
                document.getElementById('audioPlayer').src = url;
            }, function(e) {
                console.error('Error decoding audio file:', e);
            });
        }

        // Function to cut the audio
        function cutAudio() {
            const startTime = parseFloat(document.getElementById('startTime').value);
            const endTime = parseFloat(document.getElementById('endTime').value);

            if (endTime > startTime && audioBuffer) {
                const trimmedBuffer = trimAudio(audioBuffer, startTime, endTime);
                exportAudio(trimmedBuffer);
            } else {
                alert('Invalid start or end time');
            }
        }

        // Function to trim the audio
        function trimAudio(buffer, startTime, endTime) {
            const duration = endTime - startTime;
            const startSample = Math.floor(startTime * buffer.sampleRate);
            const endSample = Math.floor(endTime * buffer.sampleRate);

            const trimmedBuffer = audioContext.createBuffer(
                buffer.numberOfChannels, 
                endSample - startSample, 
                buffer.sampleRate
            );

            for (let i = 0; i < buffer.numberOfChannels; i++) {
                const channelData = buffer.getChannelData(i);
                trimmedBuffer.copyToChannel(channelData.subarray(startSample, endSample), i, 0);
            }

            return trimmedBuffer;
        }

        // Function to export trimmed audio
        function exportAudio(buffer) {
            const offlineContext = new OfflineAudioContext(buffer.numberOfChannels, buffer.length, buffer.sampleRate);
            const source = offlineContext.createBufferSource();
            source.buffer = buffer;
            source.connect(offlineContext.destination);
            source.start(0);

            offlineContext.startRendering().then(function(renderedBuffer) {
                const audioBlob = bufferToWave(renderedBuffer);
                const url = URL.createObjectURL(audioBlob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'trimmed_audio.wav';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            });
        }

        // Convert buffer to WAV Blob
        function bufferToWave(abuffer) {
            const numberOfChannels = abuffer.numberOfChannels;
            const length = abuffer.length * numberOfChannels * 2 + 44;
            const buffer = new ArrayBuffer(length);
            const view = new DataView(buffer);
            let pos = 0;

            // Write WAV header
            setUint32(0x46464952); // "RIFF"
            setUint32(length - 8); // File length - 8
            setUint32(0x45564157); // "WAVE"

            // Format chunk
            setUint32(0x20746D66); // "fmt " chunk
            setUint32(16); // Chunk length
            setUint16(1); // PCM (uncompressed)
            setUint16(numberOfChannels);
            setUint32(abuffer.sampleRate);
            setUint32(abuffer.sampleRate * 2 * numberOfChannels);
            setUint16(numberOfChannels * 2);
            setUint16(16); // 16-bit samples

            // Data chunk
            setUint32(0x61746164); // "data" chunk
            setUint32(length - pos - 4);

            for (let i = 0; i < abuffer.length; i++) {
                for (let channel = 0; channel < numberOfChannels; channel++) {
                    const sample = abuffer.getChannelData(channel)[i];
                    view.setInt16(pos, sample < 0 ? sample * 0x8000 : sample * 0x7FFF, true);
                    pos += 2;
                }
            }

            return new Blob([buffer], { type: 'audio/wav' });

            function setUint16(data) {
                view.setUint16(pos, data, true);
                pos += 2;
            }

            function setUint32(data) {
                view.setUint32(pos, data, true);
                pos += 4;
            }
        }
    </script>
</body>
</html>
